<html>

<head>
<title>火山软件开发平台</title>
<meta http-equiv="expires" content="0">
<meta http-equiv="pragma" content="no-cache">
<meta http-equiv="cache-control" content="no-cache">
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
<meta name="keywords" content="递归软件,火山开发平台,火山软件开发平台,火山游戏开发平台，安卓开发" />
<meta name="description" content="递归软件,火山开发平台,火山软件开发平台,火山游戏开发平台，安卓开发" />
<link rel="shortcut icon" type="image/x-icon" href="images/voldev.ico" media="screen" />
<link href="scripts/style.css" rel="stylesheet" type="text/css" />
</head>

<body>

<p align="left"><b><font style="font-size: 14pt">面向对象的程序设计方法</font></b></p>
<p align="left">注: 基于火山安卓平台举例</p>
<p align="left">[<a href="vol_object.htm">下一章</a>]</p>
<p align="left">&nbsp;</p>
<p align="left">面向对象的程序设计方法是目前最先进的程序设计理念，也是被目前绝大多数程序设计语言都使用的一种程序设计方法，它可以最大限度地提高程序代码的可复用性和可维护性，如果您想学习程序设计，那么这种设计方法是必须需要掌握的。</p>
<p align="left">为了降低用户的学习门槛，火山对这套理念进行了最大限度的精简，一些晦涩难懂的和一些不大常用/实用的内容均被剔除出去，只保留了其精华和必须需要掌握的部分，因此学习起来并不难。</p>
<p align="left">让我们根据一个实际生活中的例子来具体说明：</p>
<p align="left">● 假设有一家工厂，所生成的产品是电水壶，这种电水壶有这些主要特点：</p>
<blockquote>
	<p align="left">1、由壶体和壶盖组成；</p>
	<p align="left">2、颜色是银白色的；</p>
	<p align="left">3、有一个开关可以控制启动烧水；</p>
	<p align="left">4、水烧开后会发出鸣叫声音报警。</p>
</blockquote>
<p align="left">按照面向对象的设计方法，我们把这个电水壶称为这个工厂的一&quot;<b>类</b>&quot;产品，简称为“<b>电水壶类</b>”，它具有同样的4个特点：</p>
<blockquote>
	<p align="left">1、有两个成员<b>变量</b>：壶体和壶盖；</p>
	<p align="left">2、有一个成员<b>属性</b>：颜色，它的值等于银白色；</p>
	<p align="left">3、有一个成员<b>方法</b>：烧水（即按下开关就开始烧水）；</p>
	<p align="left">4、有一个成员<b>事件</b>：水已经烧开警报</p>
</blockquote>
<p align="left"><b>变量</b>用来存储类中的数据，<b>属性</b>用来表达或修改类的特征，<b>方法</b>用作执行类的功能，<b>事件</b>用来对外发送通知，<b>类</b>就是记录有一系列<b>变量</b>、<b>属性</b>、<b>方法</b>、<b>事件</b>成员的集合，所有具有这些特征成员的具体产品就叫做这个类的<b>对象，</b>这就是面向对象的程序设计理念来由<b>。</b></p>
<p align="left">用前面的例子来讲，“电水壶类”就是电水壶的产品设计规范，而具体的单个电水壶产品就是“电水壶类”的<b>对象</b>（有时也叫对象实例）。</p>
<p align="left">这就是<b>类的封装</b>。</p>
<p align="left">　</p>
<p align="left">● 假设有一天，工厂想生产一种具有自动保温功能的电水壶，有两种方案：一是完全重新设计一个新的电水壶，二是在现有电水壶的基础上增加一个保温开关。很显然，第二种方式更经济实惠，工厂把这种新的电水壶称为<b>保温电水壶</b>，它增加了一个特点：</p>
<blockquote>
	<p align="left">1、增加了一个开关： 保温，按下开关后可以对已经烧开的水进行自动保温。</p>
</blockquote>
<p align="left">按照前面的设计方法，由于新电水壶增加了一个成员，所以我们不能把它归纳到已有的“电水壶类”里面，但是我们可以建立一个新的类：“<b>保温电水壶类</b>”，它在“电水壶类”的基础上同样增加了一个新成员：</p>
<blockquote>
	<p align="left">1、成员方法：保温（即按下开关就开始保温）</p>
</blockquote>
<p align="left">由于它基于“<b>电水壶类</b>”设计而来，因此我们把“<b>电水壶类</b>”称为“<b>保温电水壶类</b>”的<b>基础类</b>或<b>父类</b>，把“<b>保温电水壶类</b>”称为“<b>电水壶类</b>”的<b>继承类</b>或<b>子类</b>，它们之间是<b>继承</b>与<b>被继承</b>的关系，继承类自动具有基础类的所有特征成员。</p>
<p align="left">由于<b>继承类</b>包括了<b>基础类</b>的所有成员，因此<b>继承类</b>也可以认为是<b>基础类</b>的一种。这个也很容易理解：我们可以把“<b>保温电水壶”</b>称为“<b>电水壶</b>”，但是不能把“<b>电水壶</b>”称为“<b>保温电水壶”</b>。假设客户要买1000个“电水壶”，现有产品数量不够时我们可以用“保温电水壶”来充数，但是客户要买1000个“保温电水壶”就绝对不能用“电水壶”来充数，是不是这个道理？</p>
<p align="left">从程序设计的角度来讲，就是我可以把一个数据类型为“<b>保温电水壶类”</b>的对象赋值到一个数据类型为“<b>电水壶</b>”的变量，但是不允许把一个数据类型为“<b>电水壶</b>”的对象赋值到一个数据类型为“<b>保温电水壶类”</b>的变量。</p>
<p align="left">需要注意的是：如果把一个数据类型为“<b>保温电水壶类”</b>的对象赋值到一个数据类型为“<b>电水壶</b>”的变量，那么这个变量里面实际存储的还是一个“<b>保温电水壶类”</b>对象，并不会因为变量的数据类型为“<b>电水壶</b>”存储进去的对象的数据类型就也为“<b>电水壶</b>”了。这个也很好理解：工厂用“<b>保温电水壶</b>”充作“<b>电水壶</b>”交付给了客户，不会因为这个充数行为就导致“<b>保温电水壶</b>”产品变成“<b>电水壶</b>”产品了。</p>
<p align="left">这就是<b>类的继承</b>。</p>
<p align="left">　</p>
<p align="left">●<b> </b>让我们继续假设，假设有一天工厂发现电茶壶的销路要比电水壶好，同样有两种方案：一是完全重新设计一个新的电茶壶，二是修改现有电水壶的烧水功能，将其改为烧茶。同样很显然，第二种方式更经济实惠。那么这种电茶壶的特点为：</p>
<blockquote>
	<p align="left">1、修改了电水壶的烧水功能，使其改去烧茶。</p>
</blockquote>
<p align="left">同样，我们需要定义一个名为“<b>电茶壶类</b>”的类，然后定义一个同样名为“<b>烧水</b>”的方法，该方法覆盖了“<b>电水壶类</b>”中的原有名为“<b>烧水</b>”的方法，然后将“<b>电水壶类</b>”中的“<b>烧水</b>”方法标记为<b><a href="grammar.htm#virtual_method">虚拟方法</a></b>（虚拟方法仅是一个标记，用作标记“<b>烧水</b>”方法可以被继承类覆盖），这样以后调用“<b>电茶壶类</b>”类的“<b>烧水</b>”方法时，就会改去烧茶，而不会去烧水。</p>
<p align="left">需要注意的是：如果把一个数据类型为“<b>电茶壶类”</b>的对象赋值到一个数据类型为“<b>电水壶</b>”的变量，据前所述，这个变量里面实际存放的还是一个“<b>电茶壶类”</b>的对象，因此如果调用该变量的“<b>烧水</b>”方法，实际上调用的还是“<b>电茶壶类”</b>的烧茶功能。</p>
<p align="left">这就是<b>类的多态</b>。</p>
<p align="left">　</p>
<p align="left">● 
	以上就是火山中所使用的面向对象程序设计的全部内容了，最后一点其实与面向对象设计无关：</p>
<p align="left">假设甲公司和乙公司都生产电水壶，商店如果同时进货了这两种电水壶，就必须在电水壶上分别贴上标签：“甲公司的电水壶”、“乙公司的电水壶”，以免引起混淆。</p>
<p align="left">在程序设计里面，就对应为“<b>甲公司.电水壶类”</b>、“<b>乙公司.电水壶类”</b>，前面的“甲公司”和“乙公司”分别定义了一个<b>命名空间</b>，也叫做“<b>包</b>”。包用作避免名称混淆，在同一个名称的包内，不允许存在相同名称的类，在不同名称的包内，可以存在相同名称的类。</p>
<p align="left">所有在包中定义的类，其名称前被自动加上包名，“包名.类名”称为类的绝对名称。如果该类的名称在程序的所有包中均唯一或者在该类所处包内部引用此类,可以省略掉其包名来引用此类。</p>
<p align="left">譬如，假设程序中不存在“<b>乙公司.电水壶类”</b>或者在“<b>甲公司</b>”包自身的代码内部，就可以直接使用“<b>电水壶类”</b>来引用“<b>甲公司.电水壶类”。</b></p>
<p align="left">注意：包名中间也可以包括句点，譬如“湖北.武汉.甲公司”或“湖南.长沙.乙公司”，这样的命名空间更明确清晰一些，也更具有唯一性。</p>
<p align="left">　</p>
<p align="left">● 我们用火山程序将前述的示例类定义出来：</p>
<div><img src="images/b1.png">
	
	<p>
	<img src="images/b2.png"> </p>
	<p align="left">具体例程请参见系统安装目录的“samples\vprj_android\samples.vsln”解决方案中的“<b>教程相关\火山面向对象设计</b>”项目<b>。</b></p>
	<p align="left">&nbsp;</p></div>

</body>

</html>
